{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Azuma","text":"<p>Yet another Sigma library for Python.</p> <p>Note: This is a forked version of CybercentreCanada/pysigma. Most of the things in this library come from their hard work.</p>"},{"location":"#requirements","title":"Requirements","text":"<ul> <li>Python 3.10+</li> </ul>"},{"location":"#installation","title":"Installation","text":"<pre><code>pip install azuma\n</code></pre>"},{"location":"#usage","title":"Usage","text":"<pre><code>from azuma import Rule, RuleSet\n\nrule = Rule.model_validate_yaml(\n    \"\"\"\ntitle: test\ndetection:\n  foo:\n    - bar\n  condition: foo\nlogsource:\n  category: test\n\"\"\"\n)\n</code></pre> <pre><code># Rule#match returns whether an event is matched with the rule or not\n&gt;&gt;&gt; rule.match({\"foo\": \"bar\"})\nTrue\n&gt;&gt;&gt; rule.match({\"foo\": \"-\"})\nFalse\n</code></pre> <pre><code># or you can create a rule from a file\nrule = Rule.parse_file(\"./your_rule.yml\")\n\n# use RuleSet if you want to do bulk matches\nrule_set = RuleSet.from_dir(\"./rules/\")\n\n# RuleSet#match_all returns a list of rules matches with an event\nrule_set.match_all({...})\n</code></pre>"},{"location":"#cli","title":"CLI","text":""},{"location":"#scan","title":"Scan","text":"<pre><code>$ azuma scan --help\n\n Usage: azuma scan [OPTIONS] PATH TARGET\n\n\u256d\u2500 Arguments \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e\n\u2502 *    path        TEXT  Path (or glob pattern) to rule YAML file(s)           \u2502\n\u2502                        [default: None]                                       \u2502\n\u2502                        [required]                                            \u2502\n\u2502 *    target      TEXT  Path (or glob pattern) to event JSON file(s)          \u2502\n\u2502                        [default: None]                                       \u2502\n\u2502                        [required]                                            \u2502\n\u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f\n</code></pre> <pre><code># Scan by single rule &amp; single event file\n$ azuma scan rule.yml event.json\n# Scan by multiple rules &amp; multiple event files\n$ azuma scan \"rules/*.yml\" \"events/*.json\"\n</code></pre>"},{"location":"#validate","title":"Validate","text":"<pre><code>$ azuma validate --help\n\n Usage: azuma validate [OPTIONS] PATH...\n\n\u256d\u2500 Arguments \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e\n\u2502 *    path      PATH...  Path(s) (or glob pattern(s)) to rule YAML file(s) [default: None] [required]                                                        \u2502\n\u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f\n\u256d\u2500 Options \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e\n\u2502 --check-id                --no-check-id                  Check for missing 'id' field [default: no-check-id]                                                \u2502\n\u2502 --check-license           --no-check-license             Check for missing 'license' field [default: no-check-license]                                      \u2502\n\u2502 --check-author            --no-check-author              Check for missing 'author' field [default: no-check-author]                                        \u2502\n\u2502 --check-date              --no-check-date                Check for missing 'date' field [default: no-check-date]                                            \u2502\n\u2502 --check-modified          --no-check-modified            Check for missing 'modified' field [default: no-check-modified]                                    \u2502\n\u2502 --check-description       --no-check-description         Check for missing 'description' field [default: no-check-description]                              \u2502\n\u2502 --check-status            --no-check-status              Check for missing 'status' field [default: no-check-status]                                        \u2502\n\u2502 --check-level             --no-check-level               Check for missing 'level' field [default: no-check-level]                                          \u2502\n\u2502 --check-references        --no-check-references          Check for missing 'references' field [default: no-check-references]                                \u2502\n\u2502 --check-tags              --no-check-tags                Check for missing 'tags' field [default: no-check-tags]                                            \u2502\n\u2502 --check-falsepositives    --no-check-falsepositives      Check for missing 'falsepositives' field [default: no-check-falsepositives]                        \u2502\n\u2502 --check-fields            --no-check-fields              Check for missing 'fields' field [default: no-check-fields]                                        \u2502\n\u2502 --check-related           --no-check-related             Check for missing 'related' field [default: no-check-related]                                      \u2502\n\u2502 --check-all               --no-check-all                 Check for all the missing optional fields [default: no-check-all]                                  \u2502\n\u2502 --help                                                   Show this message and exit.                                                                        \u2502\n\u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f\n</code></pre> <p><code>check</code> option is for checking missing optional field such as <code>id</code>.</p> <pre><code>$ azuma validate /path/to/yml --check-id\n.... has 1 validation error for Field required\nid\n  Field required [type=missing, input_value=None, input_type=NoneType]\n    For further information visit https://errors.pydantic.dev/2.7/v/missing\n</code></pre> <p><code>--check-all</code> checks presences of all the optional fields.</p> <pre><code>$ azuma validate /path/to/yml --check-id\n... has 5 validation errors for Field required\nlicense\n  Field required [type=missing, input_value=None, input_type=NoneType]\n    For further information visit https://errors.pydantic.dev/2.7/v/missing\nid\n  Field required [type=missing, input_value=None, input_type=NoneType]\n    For further information visit https://errors.pydantic.dev/2.7/v/missing\nmodified\n  Field required [type=missing, input_value=None, input_type=NoneType]\n    For further information visit https://errors.pydantic.dev/2.7/v/missing\nauthor\n  Field required [type=missing, input_value=None, input_type=NoneType]\n    For further information visit https://errors.pydantic.dev/2.7/v/missing\nrelated\n  Field required [type=missing, input_value=None, input_type=NoneType]\n    For further information visit https://errors.pydantic.dev/2.7/v/missing\n</code></pre>"},{"location":"#validate-with-hook-managers","title":"Validate With Hook Managers","text":""},{"location":"#pre-commitpre-commit","title":"pre-commit/pre-commit","text":"<pre><code>- repo: https://github.com/ninoseki/azuma\n  rev: v0.4.0\n  hooks:\n    - id: azuma\n</code></pre> <p>If you want to validate only YAML files in <code>rules</code> directory:</p> <pre><code>- repo: https://github.com/ninoseki/azuma\n  rev: v0.4.0\n  hooks:\n    - id: azuma\n      files: rules/.*\\.(yml|yaml)$\n</code></pre>"},{"location":"#evilmartianslefthook","title":"evilmartians/lefthook","text":"<pre><code>pre-commit:\n  commands:\n    azuma:\n      run: azuma validate {staged_files}\n      glob: \"*.{yaml,yml}\"\n</code></pre> <p>If you want to validate only YAML files in <code>rules</code> directory:</p> <pre><code>pre-commit:\n  commands:\n    azuma:\n      root: \"rules/\"\n      run: azuma validate {staged_files}\n      glob: \"*.{yaml,yml}\"\n</code></pre>"},{"location":"#known-limitations","title":"Known limitations","text":""},{"location":"#modifiers","title":"Modifiers","text":"<p>The following modifiers are not supported.</p> <ul> <li>expand</li> <li>fieldref</li> </ul> <p>In other words, the following modifiers are supported.</p> <ul> <li>all</li> <li>base64</li> <li>base64offset</li> <li>cased</li> <li>cidr</li> <li>contains</li> <li>endswith</li> <li>exists</li> <li>gt</li> <li>gte</li> <li>lt</li> <li>lte</li> <li>re</li> <li>startswith</li> <li>utf16</li> <li>utf16be</li> <li>utf16le</li> <li>wide</li> <li>windash</li> </ul>"},{"location":"#correlations","title":"Correlations","text":"<p>Correlations is not supported.</p>"},{"location":"references/schemas/","title":"Schemas","text":""},{"location":"references/schemas/#azuma.schemas.Rule","title":"<code>azuma.schemas.Rule</code>","text":"<p>               Bases: <code>YamlBaseModel</code></p>"},{"location":"references/schemas/#azuma.schemas.Rule.match","title":"<code>match(event)</code>","text":"<p>Check whether an event is matched with the rule or not</p> <p>Parameters:</p> Name Type Description Default <code>event</code> <code>dict[Any, Any]</code> <p>Event</p> required <p>Returns:</p> Name Type Description <code>bool</code> <code>bool</code> <p>Returns True if an event is matched with the rule. False if not</p> Source code in <code>azuma/schemas/rule.py</code> <pre><code>def match(self, event: dict[Any, Any]) -&gt; bool:\n    \"\"\"Check whether an event is matched with the rule or not\n\n    Args:\n        event (dict[Any, Any]): Event\n\n    Returns:\n        bool: Returns True if an event is matched with the rule. False if not\n    \"\"\"\n    if not isinstance(event, dict):\n        raise ValueError(\"event should be a dict\")\n\n    return self.detection.condition(self, event)\n</code></pre>"},{"location":"references/schemas/#azuma.schemas.RuleSet","title":"<code>azuma.schemas.RuleSet</code>","text":"<p>               Bases: <code>RootModel</code></p>"},{"location":"references/schemas/#azuma.schemas.RuleSet.from_dir","title":"<code>from_dir(dir, *, pattern='*.{yml,yaml}')</code>  <code>classmethod</code>","text":"<p>Load rules from a directory</p> <p>Parameters:</p> Name Type Description Default <code>dir</code> <code>str | Path</code> <p>Directory</p> required <code>pattern</code> <code>str</code> <p>YAML file pattern. Defaults to \"*.{yml,yaml}\".</p> <code>'*.{yml,yaml}'</code> <p>Returns:</p> Name Type Description <code>RuleSet</code> <code>RuleSet</code> <p>Rule set</p> Source code in <code>azuma/schemas/rule_set.py</code> <pre><code>@classmethod\ndef from_dir(cls, dir: str | Path, *, pattern=\"*.{yml,yaml}\") -&gt; \"RuleSet\":\n    \"\"\"Load rules from a directory\n\n    Args:\n        dir (str | Path): Directory\n        pattern (str, optional): YAML file pattern. Defaults to \"*.{yml,yaml}\".\n\n    Returns:\n        RuleSet: Rule set\n    \"\"\"\n    dir = Path(dir) if isinstance(dir, str) else dir\n    expanded = senkawa.glob(str(dir.joinpath(pattern)))\n    return cls(root=[Rule.model_validate_file(p) for p in expanded])\n</code></pre>"},{"location":"references/schemas/#azuma.schemas.RuleSet.match_all","title":"<code>match_all(event)</code>","text":"<p>Check whether an event is matched with the rules</p> <p>Parameters:</p> Name Type Description Default <code>event</code> <code>dict[Any, Any]</code> <p>Event</p> required <p>Returns:</p> Type Description <code>list[Rule]</code> <p>list[Rule]: A list of matched rules</p> Source code in <code>azuma/schemas/rule_set.py</code> <pre><code>def match_all(self, event: dict[Any, Any]) -&gt; list[Rule]:\n    \"\"\"Check whether an event is matched with the rules\n\n    Args:\n        event (dict[Any, Any]): Event\n\n    Returns:\n        list[Rule]: A list of matched rules\n    \"\"\"\n    return [rule for rule in self if rule.match(event)]\n</code></pre>"},{"location":"references/schemas/#azuma.schemas.RuleSet.unique","title":"<code>unique()</code>","text":"<p>Returns unique rule set.</p> <p>Returns:</p> Name Type Description <code>RuleSet</code> <code>RuleSet</code> <p>Rule set</p> Source code in <code>azuma/schemas/rule_set.py</code> <pre><code>def unique(self) -&gt; \"RuleSet\":\n    \"\"\"Returns unique rule set.\n\n    Returns:\n        RuleSet: Rule set\n    \"\"\"\n    seen: set[str] = set()\n\n    filtered: list[Rule] = []\n    for rule in self.root:\n        if rule.id is None:\n            filtered.append(rule)\n            continue\n\n        if rule.id not in seen:\n            seen.add(rule.id)\n            filtered.append(rule)\n\n    return RuleSet(root=filtered)\n</code></pre>"},{"location":"references/schemas/#azuma.schemas.yaml_model.YamlBaseModel","title":"<code>azuma.schemas.yaml_model.YamlBaseModel</code>","text":"<p>               Bases: <code>BaseModel</code></p> <p>BaseModel with YAML support</p>"},{"location":"references/schemas/#azuma.schemas.yaml_model.YamlBaseModel.model_validate_file","title":"<code>model_validate_file(path, *, encoding='utf8', strict=None, context=None)</code>  <code>classmethod</code>","text":"<p>Parse a YAML file.</p> <p>Parameters:</p> Name Type Description Default <code>path</code> <code>str | Path</code> <p>Path to a file.</p> required <code>encoding</code> <code>str</code> <p>Encoding. Defaults to \"utf8\".</p> <code>'utf8'</code> <code>strict</code> <code>bool | None</code> <p>Strict or not. Defaults to None.</p> <code>None</code> <code>context</code> <code>dict[str, Any] | None</code> <p>Context. Defaults to None.</p> <code>None</code> <p>Returns:</p> Name Type Description <code>YamlBaseModel</code> <p>Parsed instance.</p> Source code in <code>azuma/schemas/yaml_model.py</code> <pre><code>@classmethod\ndef model_validate_file(  # type: ignore\n    cls,\n    path: str | Path,\n    *,\n    encoding: str = \"utf8\",\n    strict: bool | None = None,\n    context: dict[str, Any] | None = None,\n):\n    \"\"\"Parse a YAML file.\n\n    Args:\n        path (str | Path): Path to a file.\n        encoding (str, optional): Encoding. Defaults to \"utf8\".\n        strict (bool | None, optional): Strict or not. Defaults to None.\n        context (dict[str, Any] | None, optional): Context. Defaults to None.\n\n    Returns:\n        YamlBaseModel: Parsed instance.\n    \"\"\"\n    with open(path, encoding=encoding) as f:\n        text = f.read()\n\n    obj = yaml.safe_load(text)\n    return cls.model_validate(obj, strict=strict, context=context)\n</code></pre>"},{"location":"references/schemas/#azuma.schemas.yaml_model.YamlBaseModel.model_validate_yaml","title":"<code>model_validate_yaml(b, *, strict=None, context=None)</code>  <code>classmethod</code>","text":"<p>Parse a YAML text.</p> <p>Parameters:</p> Name Type Description Default <code>b</code> <code>str | bytes</code> <p>String or bytes.</p> required <code>strict</code> <code>bool | None</code> <p>Strict or not. Defaults to None.</p> <code>None</code> <code>context</code> <code>dict[str, Any] | None</code> <p>Context. Defaults to None.</p> <code>None</code> <p>Returns:</p> Name Type Description <code>YamlBaseModel</code> <p>Parsed instance.</p> Source code in <code>azuma/schemas/yaml_model.py</code> <pre><code>@classmethod\ndef model_validate_yaml(  # type: ignore\n    cls,\n    b: str | bytes,\n    *,\n    strict: bool | None = None,\n    context: dict[str, Any] | None = None,\n):\n    \"\"\"Parse a YAML text.\n\n    Args:\n        b (str | bytes): String or bytes.\n        strict (bool | None, optional): Strict or not. Defaults to None.\n        context (dict[str, Any] | None, optional): Context. Defaults to None.\n\n    Returns:\n        YamlBaseModel: Parsed instance.\n    \"\"\"\n    obj = yaml.safe_load(b)\n    return cls.model_validate(obj, strict=strict, context=context)\n</code></pre>"}]}